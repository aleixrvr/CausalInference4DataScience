---
title: "Difference in Differences"
format: ipynb
jupyter: python3
number-sections: true
---

# Data simulation

```{python}
from numpy.random import normal, seed
from numpy import cos, mean, pi, arange, hstack, array, floor
import statsmodels.formula.api as smf
import pandas as pd
from doubleml import DoubleMLData
from doubleml import DoubleMLDID
from sklearn.linear_model import LogisticRegression, LinearRegression


seed(1234)

impact = 200
n_group = 10

time_points_base = arange(0, 2)
n = len(time_points_base)
seasonality_base = -cos(time_points_base / (2 * pi))

time_points = hstack((time_points_base,) * 2 * n_group)
seasonality = hstack((seasonality_base,) * 2 * n_group)
D = array([0] * (2 * n_group) + [1] * (2 * n_group))
id = list(range(1, 2 * n_group + 1)) * 2
id.sort()

Y_0 = 500 + 200 * D + 100 * seasonality + normal(size=4 * n_group, scale=100)
Y_1 = Y_0 + D * time_points * impact
Y = D * Y_1 + (1 - D) * Y_0

df_observed = pd.DataFrame({"id": id, "time_points": time_points, "D": D, "Y": Y})
```


# DiD ATET estimation with the direct method

```{python}
diff_1 = mean(
    df_observed.loc[(df_observed.time_points == 1) & (df_observed.D == 1), "Y"]
) - mean(df_observed.loc[(df_observed.time_points == 0) & (df_observed.D == 1), "Y"])

diff_0 = mean(
    df_observed.loc[(df_observed.time_points == 1) & (df_observed.D == 0), "Y"]
) - mean(df_observed.loc[(df_observed.time_points == 0) & (df_observed.D == 0), "Y"])

diff_1 - diff_0
```


# DiD ATET with linear models

```{python}
model = smf.ols(formula="Y~D*time_points", data=df_observed).fit()
model.summary()
```

# DiD ATET with linear models with additional covariates

```{python}
n_a = int(floor(n_group / 4))
A = [1] * (n_a * 2) + [0] * (2 * (n_group - n_a))
n_a = int(floor(n_group / 2))
A = array(A + [1] * (n_a * 2) + [0] * (2 * (n_group - n_a)))

D = array([0] * (2 * n_group) + [1] * (2 * n_group))

Y_0_age = Y_0 - 50 * A
Y_1_age = Y_1 - 50 * A
Y_age = D * Y_1_age + (1 - D) * Y_0_age

df_observed_covariates = pd.DataFrame(
    {"id": id, "time_points": time_points, "D": D, "Y": Y, "A": A}
)

model = smf.ols(formula="Y~D*time_points + A", data=df_observed_covariates).fit()
model.summary()
```

# DiD ATET with the did package

```{python}

dml_data = DoubleMLData(
    df_observed_covariates, y_col="Y", d_cols="D", x_cols="A", t_col="time_points"
)

ml_g = LinearRegression()
ml_m = LogisticRegression(penalty=None)

dml_did = DoubleMLDID(
    dml_data,
    ml_g=ml_g,
    ml_m=ml_m,
    score="observational",
    in_sample_normalization=True,
    n_folds=5,
)

dml_did.fit()
print(dml_did)
```